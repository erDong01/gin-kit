// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attachment.proto

package attachment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UptokenRequest struct {
	AttachmentTypeName   string   `protobuf:"bytes,1,opt,name=attachment_type_name,json=attachmentTypeName,proto3" json:"attachment_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UptokenRequest) Reset()         { *m = UptokenRequest{} }
func (m *UptokenRequest) String() string { return proto.CompactTextString(m) }
func (*UptokenRequest) ProtoMessage()    {}
func (*UptokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{0}
}

func (m *UptokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UptokenRequest.Unmarshal(m, b)
}
func (m *UptokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UptokenRequest.Marshal(b, m, deterministic)
}
func (m *UptokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UptokenRequest.Merge(m, src)
}
func (m *UptokenRequest) XXX_Size() int {
	return xxx_messageInfo_UptokenRequest.Size(m)
}
func (m *UptokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UptokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UptokenRequest proto.InternalMessageInfo

func (m *UptokenRequest) GetAttachmentTypeName() string {
	if m != nil {
		return m.AttachmentTypeName
	}
	return ""
}

type FileAllow struct {
	MimeType             string   `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	MaxSize              int64    `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileAllow) Reset()         { *m = FileAllow{} }
func (m *FileAllow) String() string { return proto.CompactTextString(m) }
func (*FileAllow) ProtoMessage()    {}
func (*FileAllow) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{1}
}

func (m *FileAllow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileAllow.Unmarshal(m, b)
}
func (m *FileAllow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileAllow.Marshal(b, m, deterministic)
}
func (m *FileAllow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileAllow.Merge(m, src)
}
func (m *FileAllow) XXX_Size() int {
	return xxx_messageInfo_FileAllow.Size(m)
}
func (m *FileAllow) XXX_DiscardUnknown() {
	xxx_messageInfo_FileAllow.DiscardUnknown(m)
}

var xxx_messageInfo_FileAllow proto.InternalMessageInfo

func (m *FileAllow) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *FileAllow) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type UptokenResponse struct {
	UploadToken          string       `protobuf:"bytes,1,opt,name=upload_token,json=uploadToken,proto3" json:"upload_token,omitempty"`
	Expire               string       `protobuf:"bytes,2,opt,name=expire,proto3" json:"expire,omitempty"`
	Domain               string       `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	FileAllow            []*FileAllow `protobuf:"bytes,4,rep,name=file_allow,json=fileAllow,proto3" json:"file_allow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UptokenResponse) Reset()         { *m = UptokenResponse{} }
func (m *UptokenResponse) String() string { return proto.CompactTextString(m) }
func (*UptokenResponse) ProtoMessage()    {}
func (*UptokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{2}
}

func (m *UptokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UptokenResponse.Unmarshal(m, b)
}
func (m *UptokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UptokenResponse.Marshal(b, m, deterministic)
}
func (m *UptokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UptokenResponse.Merge(m, src)
}
func (m *UptokenResponse) XXX_Size() int {
	return xxx_messageInfo_UptokenResponse.Size(m)
}
func (m *UptokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UptokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UptokenResponse proto.InternalMessageInfo

func (m *UptokenResponse) GetUploadToken() string {
	if m != nil {
		return m.UploadToken
	}
	return ""
}

func (m *UptokenResponse) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

func (m *UptokenResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UptokenResponse) GetFileAllow() []*FileAllow {
	if m != nil {
		return m.FileAllow
	}
	return nil
}

type AttacmentInfoRequest struct {
	AttachmentTypeName   string   `protobuf:"bytes,1,opt,name=attachment_type_name,json=attachmentTypeName,proto3" json:"attachment_type_name,omitempty"`
	FileSize             int64    `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	OriginalFileName     string   `protobuf:"bytes,3,opt,name=original_file_name,json=originalFileName,proto3" json:"original_file_name,omitempty"`
	MimeType             string   `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	QiniuPath            string   `protobuf:"bytes,5,opt,name=qiniu_path,json=qiniuPath,proto3" json:"qiniu_path,omitempty"`
	IsCompress           int64    `protobuf:"varint,6,opt,name=is_compress,json=isCompress,proto3" json:"is_compress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttacmentInfoRequest) Reset()         { *m = AttacmentInfoRequest{} }
func (m *AttacmentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*AttacmentInfoRequest) ProtoMessage()    {}
func (*AttacmentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{3}
}

func (m *AttacmentInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttacmentInfoRequest.Unmarshal(m, b)
}
func (m *AttacmentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttacmentInfoRequest.Marshal(b, m, deterministic)
}
func (m *AttacmentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttacmentInfoRequest.Merge(m, src)
}
func (m *AttacmentInfoRequest) XXX_Size() int {
	return xxx_messageInfo_AttacmentInfoRequest.Size(m)
}
func (m *AttacmentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttacmentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttacmentInfoRequest proto.InternalMessageInfo

func (m *AttacmentInfoRequest) GetAttachmentTypeName() string {
	if m != nil {
		return m.AttachmentTypeName
	}
	return ""
}

func (m *AttacmentInfoRequest) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *AttacmentInfoRequest) GetOriginalFileName() string {
	if m != nil {
		return m.OriginalFileName
	}
	return ""
}

func (m *AttacmentInfoRequest) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *AttacmentInfoRequest) GetQiniuPath() string {
	if m != nil {
		return m.QiniuPath
	}
	return ""
}

func (m *AttacmentInfoRequest) GetIsCompress() int64 {
	if m != nil {
		return m.IsCompress
	}
	return 0
}

type AttacmentInfoResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttacmentInfoResponse) Reset()         { *m = AttacmentInfoResponse{} }
func (m *AttacmentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*AttacmentInfoResponse) ProtoMessage()    {}
func (*AttacmentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50ce80bdd3ef17d6, []int{4}
}

func (m *AttacmentInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttacmentInfoResponse.Unmarshal(m, b)
}
func (m *AttacmentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttacmentInfoResponse.Marshal(b, m, deterministic)
}
func (m *AttacmentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttacmentInfoResponse.Merge(m, src)
}
func (m *AttacmentInfoResponse) XXX_Size() int {
	return xxx_messageInfo_AttacmentInfoResponse.Size(m)
}
func (m *AttacmentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttacmentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttacmentInfoResponse proto.InternalMessageInfo

func (m *AttacmentInfoResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*UptokenRequest)(nil), "attachment.UptokenRequest")
	proto.RegisterType((*FileAllow)(nil), "attachment.FileAllow")
	proto.RegisterType((*UptokenResponse)(nil), "attachment.UptokenResponse")
	proto.RegisterType((*AttacmentInfoRequest)(nil), "attachment.AttacmentInfoRequest")
	proto.RegisterType((*AttacmentInfoResponse)(nil), "attachment.AttacmentInfoResponse")
}

func init() { proto.RegisterFile("attachment.proto", fileDescriptor_50ce80bdd3ef17d6) }

var fileDescriptor_50ce80bdd3ef17d6 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x65, 0x52, 0x4c, 0x3c, 0x41, 0x50, 0xad, 0xda, 0xca, 0xa4, 0x42, 0xb8, 0x3e, 0xe5,
	0x80, 0x0a, 0x2a, 0xbc, 0x40, 0xa8, 0x00, 0x71, 0x41, 0xc8, 0x0d, 0x07, 0x4e, 0xab, 0x25, 0x99,
	0x90, 0x15, 0xde, 0x8f, 0x78, 0xd7, 0x22, 0xc9, 0xa3, 0xf0, 0x10, 0x3c, 0x1b, 0x8f, 0x80, 0x76,
	0xbd, 0x89, 0x9d, 0x28, 0xe2, 0xd0, 0x9b, 0xe7, 0x37, 0x1f, 0xfe, 0xcf, 0x7f, 0x6c, 0x38, 0x65,
	0xd6, 0xb2, 0xe9, 0x42, 0xa0, 0xb4, 0xd7, 0xba, 0x52, 0x56, 0x11, 0x68, 0x49, 0xfe, 0x0e, 0x9e,
	0x7c, 0xd5, 0x56, 0xfd, 0x44, 0x59, 0xe0, 0xb2, 0x46, 0x63, 0xc9, 0x6b, 0x38, 0x6b, 0xf3, 0xd4,
	0xae, 0x35, 0x52, 0xc9, 0x04, 0xa6, 0x51, 0x16, 0x8d, 0x92, 0x82, 0xb4, 0xb9, 0xc9, 0x5a, 0xe3,
	0x67, 0x26, 0x30, 0xbf, 0x85, 0xe4, 0x03, 0x2f, 0x71, 0x5c, 0x96, 0xea, 0x17, 0xb9, 0x84, 0x44,
	0x70, 0x81, 0xbe, 0x31, 0xf4, 0xf4, 0x1d, 0x70, 0xd5, 0xe4, 0x19, 0xf4, 0x05, 0x5b, 0x51, 0xc3,
	0x37, 0x98, 0x3e, 0xc8, 0xa2, 0x51, 0xaf, 0x78, 0x24, 0xd8, 0xea, 0x8e, 0x6f, 0x30, 0xff, 0x1d,
	0xc1, 0xd3, 0x9d, 0x12, 0xa3, 0x95, 0x34, 0x48, 0xae, 0xe0, 0x71, 0xad, 0x4b, 0xc5, 0x66, 0xd4,
	0xf3, 0x30, 0x6e, 0xd0, 0xb0, 0x89, 0x43, 0xe4, 0x02, 0x62, 0x5c, 0x69, 0x5e, 0x35, 0xf3, 0x92,
	0x22, 0x44, 0x8e, 0xcf, 0x94, 0x60, 0x5c, 0xa6, 0xbd, 0x86, 0x37, 0x11, 0x79, 0x0b, 0x30, 0xe7,
	0x25, 0x52, 0xe6, 0xc4, 0xa6, 0x27, 0x59, 0x6f, 0x34, 0xb8, 0x39, 0xbf, 0xee, 0x58, 0xb4, 0xdb,
	0xa4, 0x48, 0xe6, 0xdb, 0xc7, 0xfc, 0x6f, 0x04, 0x67, 0x63, 0x57, 0xe3, 0x4a, 0x3e, 0xc9, 0xb9,
	0xba, 0xb7, 0x59, 0xce, 0x1f, 0x2f, 0xa0, 0xe3, 0x41, 0xdf, 0x01, 0x67, 0x02, 0x79, 0x09, 0x44,
	0x55, 0xfc, 0x07, 0x97, 0xac, 0xa4, 0xbe, 0xca, 0x0f, 0x6b, 0x36, 0x38, 0xdd, 0x66, 0x9c, 0xc2,
	0xed, 0xa8, 0xd6, 0xea, 0x93, 0x03, 0xab, 0x9f, 0x03, 0x2c, 0xb9, 0xe4, 0x35, 0xd5, 0xcc, 0x2e,
	0xd2, 0x87, 0x3e, 0x9b, 0x78, 0xf2, 0x85, 0xd9, 0x05, 0x79, 0x01, 0x03, 0x6e, 0xe8, 0x54, 0x09,
	0x5d, 0xa1, 0x31, 0x69, 0xec, 0x85, 0x00, 0x37, 0xb7, 0x81, 0xe4, 0xaf, 0xe0, 0xfc, 0x60, 0xe3,
	0x70, 0x94, 0x0b, 0x88, 0x2b, 0x34, 0x75, 0x69, 0xc3, 0x92, 0x21, 0xba, 0xf9, 0x13, 0x01, 0x8c,
	0x77, 0xfb, 0x92, 0xf7, 0x00, 0x1f, 0xd1, 0x86, 0x8b, 0x92, 0x61, 0xd7, 0xe2, 0xfd, 0x0f, 0x6e,
	0x78, 0x79, 0x34, 0x17, 0xde, 0xf6, 0x0d, 0xc8, 0x9d, 0x55, 0x15, 0xee, 0x69, 0x21, 0x59, 0xb7,
	0xe5, 0xd8, 0x61, 0x86, 0x57, 0xff, 0xa9, 0x68, 0x46, 0x7f, 0x8f, 0xfd, 0xdf, 0xf0, 0xe6, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x23, 0x63, 0x1d, 0x21, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AttachmentClient is the client API for Attachment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttachmentClient interface {
	GetUptoken(ctx context.Context, in *UptokenRequest, opts ...grpc.CallOption) (*UptokenResponse, error)
	StoreAttacmentInfo(ctx context.Context, in *AttacmentInfoRequest, opts ...grpc.CallOption) (*AttacmentInfoResponse, error)
}

type attachmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentClient(cc grpc.ClientConnInterface) AttachmentClient {
	return &attachmentClient{cc}
}

func (c *attachmentClient) GetUptoken(ctx context.Context, in *UptokenRequest, opts ...grpc.CallOption) (*UptokenResponse, error) {
	out := new(UptokenResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/GetUptoken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) StoreAttacmentInfo(ctx context.Context, in *AttacmentInfoRequest, opts ...grpc.CallOption) (*AttacmentInfoResponse, error) {
	out := new(AttacmentInfoResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/StoreAttacmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServer is the server API for Attachment service.
type AttachmentServer interface {
	GetUptoken(context.Context, *UptokenRequest) (*UptokenResponse, error)
	StoreAttacmentInfo(context.Context, *AttacmentInfoRequest) (*AttacmentInfoResponse, error)
}

// UnimplementedAttachmentServer can be embedded to have forward compatible implementations.
type UnimplementedAttachmentServer struct {
}

func (*UnimplementedAttachmentServer) GetUptoken(ctx context.Context, req *UptokenRequest) (*UptokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUptoken not implemented")
}
func (*UnimplementedAttachmentServer) StoreAttacmentInfo(ctx context.Context, req *AttacmentInfoRequest) (*AttacmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAttacmentInfo not implemented")
}

func RegisterAttachmentServer(s *grpc.Server, srv AttachmentServer) {
	s.RegisterService(&_Attachment_serviceDesc, srv)
}

func _Attachment_GetUptoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).GetUptoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/GetUptoken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).GetUptoken(ctx, req.(*UptokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_StoreAttacmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttacmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).StoreAttacmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/StoreAttacmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).StoreAttacmentInfo(ctx, req.(*AttacmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Attachment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "attachment.Attachment",
	HandlerType: (*AttachmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUptoken",
			Handler:    _Attachment_GetUptoken_Handler,
		},
		{
			MethodName: "StoreAttacmentInfo",
			Handler:    _Attachment_StoreAttacmentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachment.proto",
}
